coreDns:
  enabled: true
  service:
    selector:
      k8s-app: kube-dns
kubeControllerManager:
  enabled: false
kubeEtcd:
  enabled: true
  service:
    selector:
      k8s-app: ""
      component: etcd
kubeScheduler:
  enabled: false
kubeApiServer:
    enabled: true
kubelet:
  enabled: true
kubeDns:
  enabled: false
kubeProxy:
  enabled: true
kubeStateMetrics:
  enabled: true
nodeExporter:
  enabled: true
  jobLabel: node-exporter
  serviceMonitor:
    relabelings:
      - targetLabel: job
        replacement: node-exporter
prometheus-node-exporter:
  podLabels:
    jobLabel: node-exporter
  extraArgs:
    - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
    - --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$

prometheus:
  enabled: true
  prometheusSpec:
    scrapeInterval: 30s
    scrapeTimeout: 10s
    enableAdminAPI: true
    ruleSelectorNilUsesHelmValues: true
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false

defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: true
    configReloaders: true
    general: true
    k8s: true
    kubeApiserver: true
    kubeApiserverAvailability: true
    kubeApiserverSlos: true
    kubelet: true
    kubeProxy: true
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeScheduler: false
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true

alertmanager:
  enabled: true
  config:
    global:
      resolve_timeout: 5m
    route:
      group_by: ['job']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'slack'
      routes:
      - match:
          severity: 'critical'
        receiver: 'slack'
    receivers:
      - name: 'slack'
        slack_configs:
        - api_url: 'https://hooks.slack.com/services/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'
          send_resolved: true
          channel: '#avisos'
          title: '[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] Monitoring Event Notification'
          text: |-
            {{ range .Alerts }}
              *Alert:* {{ .Labels.alertname }} - `{{ .Labels.severity }}`
              *Description:* {{ .Annotations.message }}
              *Graph:* <{{ .GeneratorURL }}|:chart_with_upwards_trend:> *Runbook:* <{{ .Annotations.runbook_url }}|:spiral_note_pad:>
              *Details:*
              {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
              {{ end }}
            {{ end }}

prometheusOperator:
  enabled: true

additionalPrometheusRulesMap:
  rule-name:
    groups:
      - name: ruleset_1
        rules:
          - alert: MongoDBDown
            expr: mongodb_up == 0
            for: 0m
            labels:
              severity: critical
            annotations:
              summary: MongoDB Down (instance {{ $labels.instance }})
              description: "MongoDB instance is down"

          - alert: ContainerCPULimitExceeded
            expr: sum(rate(container_cpu_usage_seconds_total{container_name!="POD", pod_name!="", namespace!="", job!="", container_name!=""}[1m])) by (namespace, pod_name, container_name) / sum(kube_pod_container_resource_limits_cpu_cores{container!="", namespace!="", container!=""}) by (namespace, pod_name, container_name) * 100 > 100
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: Container CPU limit exceeded ({{ $labels.namespace }}/{{ $labels.pod_name }}/{{ $labels.container_name }})
              description: "Container CPU limit exceeded"
              message: Container CPU usage is higher than the configured limit

          - alert: ContainerMemoryLimitExceeded
            expr: sum(container_memory_working_set_bytes{container_name!="POD", pod_name!="", namespace!="", job!="", container_name!=""}) by (namespace, pod_name, container_name) / sum(kube_pod_container_resource_limits_memory_bytes{container!="", namespace!="", container!=""}) by (namespace, pod_name, container_name) * 100 > 100
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: Container memory limit exceeded ({{ $labels.namespace }}/{{ $labels.pod_name }}/{{ $labels.container_name }})
              description: "Container memory limit exceeded"
              message: Container memory usage is higher than the configured limit

grafana:
  plugins:
    - grafana-piechart-panel
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: "default"
          orgId: 1
          folder: ""
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default
  dashboards:
    default:
      node-exporter:
        gnetId: 11074
        revision: 9
        datasource: Prometheus
      node-exporter-full:
        gnetId: 1860
        revision: 29
        datasource: Prometheus
      mongodb:
        gnetId: 16490
        revision: 1
        datasource: Prometheus
